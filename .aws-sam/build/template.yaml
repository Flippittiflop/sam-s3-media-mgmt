AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Parameters:
  BucketName:
    Type: String
    Default: hazel-buchan-website-media-content
    Description: Name of the S3 bucket for storing media
  AdminUserEmail:
    Type: String
    Description: Email for the initial admin user
    Default: admin@example.com
Resources:
  AdminUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: MediaManagementAdminPool
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: true
      AutoVerifiedAttributes:
      - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true
  AdminUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId:
        Ref: AdminUserPool
      ClientName: MediaManagementAdminClient
      GenerateSecret: false
      ExplicitAuthFlows:
      - ALLOW_USER_SRP_AUTH
      - ALLOW_USER_PASSWORD_AUTH
      - ALLOW_REFRESH_TOKEN_AUTH
      PreventUserExistenceErrors: ENABLED
  AdminGroup:
    Type: AWS::Cognito::UserPoolGroup
    DependsOn: AdminUserPool
    Properties:
      GroupName: Admin
      UserPoolId:
        Ref: AdminUserPool
      Description: Administrator group with full access
      Precedence: 0
  UsersGroup:
    Type: AWS::Cognito::UserPoolGroup
    DependsOn: AdminUserPool
    Properties:
      GroupName: Users
      UserPoolId:
        Ref: AdminUserPool
      Description: Regular users with limited access
      Precedence: 1
  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Auth:
        DefaultAuthorizer: CognitoAuthorizer
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn:
              Fn::GetAtt:
              - AdminUserPool
              - Arn
            Identity:
              Header: Authorization
        AddDefaultAuthorizerToCorsPreflight: false
      EndpointConfiguration: REGIONAL
      Cors:
        AllowMethods: '''GET,POST,PUT,DELETE,OPTIONS'''
        AllowHeaders: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Requested-With'''
        AllowOrigin: '''*'''
        MaxAge: '''3600'''
        AllowCredentials: '''false'''
  MediaBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Ref: BucketName
      CorsConfiguration:
        CorsRules:
        - AllowedHeaders:
          - '*'
          AllowedMethods:
          - GET
          - PUT
          - POST
          AllowedOrigins:
          - '*'
          MaxAge: 3000
  CategoryTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Categories
      AttributeDefinitions:
      - AttributeName: categoryId
        AttributeType: S
      - AttributeName: templateId
        AttributeType: S
      KeySchema:
      - AttributeName: categoryId
        KeyType: HASH
      GlobalSecondaryIndexes:
      - IndexName: TemplateIndex
        KeySchema:
        - AttributeName: templateId
          KeyType: HASH
        Projection:
          ProjectionType: ALL
      BillingMode: PAY_PER_REQUEST
  TemplateTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Templates
      AttributeDefinitions:
      - AttributeName: templateId
        AttributeType: S
      KeySchema:
      - AttributeName: templateId
        KeyType: HASH
      BillingMode: PAY_PER_REQUEST
  MediaMetadataTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: MediaMetadata
      AttributeDefinitions:
      - AttributeName: mediaId
        AttributeType: S
      - AttributeName: categoryId
        AttributeType: S
      KeySchema:
      - AttributeName: mediaId
        KeyType: HASH
      - AttributeName: categoryId
        KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
      GlobalSecondaryIndexes:
      - IndexName: CategoryIndex
        KeySchema:
        - AttributeName: categoryId
          KeyType: HASH
        Projection:
          ProjectionType: ALL
  GetCategoriesFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/categories/get-categories.handler
      Runtime: nodejs20.x
      Policies:
      - DynamoDBReadPolicy:
          TableName:
            Ref: CategoryTable
      Environment:
        Variables:
          CATEGORY_TABLE:
            Ref: CategoryTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /categories
            Method: GET
            RestApiId:
              Ref: ApiGatewayApi
            Auth:
              Authorizer: CognitoAuthorizer
      CodeUri: GetCategoriesFunction
    Metadata:
      SamResourceId: GetCategoriesFunction
  CreateCategoryFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/categories/create-category.handler
      Runtime: nodejs20.x
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: CategoryTable
      - DynamoDBReadPolicy:
          TableName:
            Ref: TemplateTable
      Environment:
        Variables:
          CATEGORY_TABLE:
            Ref: CategoryTable
          TEMPLATE_TABLE:
            Ref: TemplateTable
          USER_POOL_ID:
            Ref: AdminUserPool
      Events:
        Api:
          Type: Api
          Properties:
            Path: /categories
            Method: POST
            RestApiId:
              Ref: ApiGatewayApi
            Auth:
              Authorizer: CognitoAuthorizer
      CodeUri: CreateCategoryFunction
    Metadata:
      SamResourceId: CreateCategoryFunction
  GetTemplateFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/templates/get-template.handler
      Runtime: nodejs20.x
      Policies:
      - DynamoDBReadPolicy:
          TableName:
            Ref: TemplateTable
      Environment:
        Variables:
          TEMPLATE_TABLE:
            Ref: TemplateTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /templates/{templateId}
            Method: GET
            RestApiId:
              Ref: ApiGatewayApi
            Auth:
              Authorizer: CognitoAuthorizer
      CodeUri: GetTemplateFunction
    Metadata:
      SamResourceId: GetTemplateFunction
  UpsertTemplateFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/templates/upsert-template.handler
      Runtime: nodejs20.x
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: TemplateTable
      Environment:
        Variables:
          TEMPLATE_TABLE:
            Ref: TemplateTable
          USER_POOL_ID:
            Ref: AdminUserPool
      Events:
        Api:
          Type: Api
          Properties:
            Path: /templates
            Method: POST
            RestApiId:
              Ref: ApiGatewayApi
            Auth:
              Authorizer: CognitoAuthorizer
      CodeUri: UpsertTemplateFunction
    Metadata:
      SamResourceId: UpsertTemplateFunction
  UploadMediaFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/media/upload-media.handler
      Runtime: nodejs20.x
      Timeout: 30
      Policies:
      - S3CrudPolicy:
          BucketName:
            Ref: BucketName
      - DynamoDBCrudPolicy:
          TableName:
            Ref: MediaMetadataTable
      Environment:
        Variables:
          BUCKET_NAME:
            Ref: BucketName
          METADATA_TABLE:
            Ref: MediaMetadataTable
          USER_POOL_ID:
            Ref: AdminUserPool
      Events:
        Api:
          Type: Api
          Properties:
            Path: /media
            Method: POST
            RestApiId:
              Ref: ApiGatewayApi
            Auth:
              Authorizer: CognitoAuthorizer
      CodeUri: UploadMediaFunction
    Metadata:
      SamResourceId: UploadMediaFunction
Outputs:
  ApiEndpoint:
    Description: API Gateway endpoint URL
    Value:
      Fn::Sub: https://${ApiGatewayApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/
  UserPoolId:
    Description: Cognito User Pool ID
    Value:
      Ref: AdminUserPool
  UserPoolClientId:
    Description: Cognito User Pool Client ID
    Value:
      Ref: AdminUserPoolClient
  BucketName:
    Description: S3 Bucket Name
    Value:
      Ref: MediaBucket
