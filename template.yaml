AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Parameters:
  BucketName:
    Type: String
    Default: hazel-buchan-website-media-content
    Description: Name of the S3 bucket for storing media
  AdminUserEmail:
    Type: String
    Description: Email for the initial admin user
    Default: admin@example.com

Resources:
  AdminUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: MediaManagementAdminPool
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: true
      AutoVerifiedAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true

  AdminGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: Admin
      UserPoolId: !Ref AdminUserPool
      Description: Administrator group with full access
      Precedence: 0

  UsersGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: Users
      UserPoolId: !Ref AdminUserPool
      Description: Regular users with limited access
      Precedence: 1

  AdminUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref AdminUserPool
      ClientName: MediaManagementAdminClient
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_SRP_AUTH
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      PreventUserExistenceErrors: ENABLED

  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Auth:
        DefaultAuthorizer: CognitoAuthorizer
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt AdminUserPool.Arn
            Identity:
              Header: Authorization
        AddDefaultAuthorizerToCorsPreflight: false
      EndpointConfiguration: REGIONAL
      Cors:
        AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Requested-With'"
        AllowOrigin: "'*'"
        MaxAge: "'3600'"
        AllowCredentials: "'false'"

  ApiKey:
    Type: AWS::ApiGateway::ApiKey
    DependsOn: ApiGatewayApiProdStage
    Properties:
      Name: WebsiteApiKey
      Description: API Key for public website access
      Enabled: true
      StageKeys:
        - RestApiId: !Ref ApiGatewayApi
          StageName: Prod

  UsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    DependsOn: ApiGatewayApiProdStage
    Properties:
      ApiStages:
        - ApiId: !Ref ApiGatewayApi
          Stage: Prod
      Description: Usage plan for website API key
      Quota:
        Limit: 5000
        Period: MONTH
      Throttle:
        BurstLimit: 100
        RateLimit: 50

  UsagePlanKey:
    Type: AWS::ApiGateway::UsagePlanKey
    Properties:
      KeyId: !Ref ApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref UsagePlan

  MediaBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref BucketName
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ['*']
            AllowedMethods: [GET, PUT, POST]
            AllowedOrigins: ['*']
            MaxAge: 3000

  CategoryTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Categories
      AttributeDefinitions:
        - AttributeName: categoryId
          AttributeType: S
        - AttributeName: templateId
          AttributeType: S
      KeySchema:
        - AttributeName: categoryId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: TemplateIndex
          KeySchema:
            - AttributeName: templateId
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      BillingMode: PAY_PER_REQUEST

  TemplateTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Templates
      AttributeDefinitions:
        - AttributeName: templateId
          AttributeType: S
      KeySchema:
        - AttributeName: templateId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  MediaMetadataTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: MediaMetadata
      AttributeDefinitions:
        - AttributeName: mediaId
          AttributeType: S
        - AttributeName: categoryId
          AttributeType: S
      KeySchema:
        - AttributeName: mediaId
          KeyType: HASH
        - AttributeName: categoryId
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
      GlobalSecondaryIndexes:
        - IndexName: CategoryIndex
          KeySchema:
            - AttributeName: categoryId
              KeyType: HASH
          Projection:
            ProjectionType: ALL

  GetCategoriesFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/categories/get-categories.handler
      Runtime: nodejs20.x
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref CategoryTable
      Environment:
        Variables:
          CATEGORY_TABLE: !Ref CategoryTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /admin/categories
            Method: GET
            RestApiId: !Ref ApiGatewayApi
            Auth:
              Authorizer: CognitoAuthorizer

  CreateCategoryFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/categories/create-category.handler
      Runtime: nodejs20.x
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref CategoryTable
        - DynamoDBReadPolicy:
            TableName: !Ref TemplateTable
      Environment:
        Variables:
          CATEGORY_TABLE: !Ref CategoryTable
          TEMPLATE_TABLE: !Ref TemplateTable
          USER_POOL_ID: !Ref AdminUserPool
      Events:
        Api:
          Type: Api
          Properties:
            Path: /admin/categories
            Method: POST
            RestApiId: !Ref ApiGatewayApi
            Auth:
              Authorizer: CognitoAuthorizer

  GetTemplateFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/templates/get-template.handler
      Runtime: nodejs20.x
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref TemplateTable
      Environment:
        Variables:
          TEMPLATE_TABLE: !Ref TemplateTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /admin/templates/{templateId}
            Method: GET
            RestApiId: !Ref ApiGatewayApi
            Auth:
              Authorizer: CognitoAuthorizer

  UpsertTemplateFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/templates/upsert-template.handler
      Runtime: nodejs20.x
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TemplateTable
      Environment:
        Variables:
          TEMPLATE_TABLE: !Ref TemplateTable
          USER_POOL_ID: !Ref AdminUserPool
      Events:
        Api:
          Type: Api
          Properties:
            Path: /admin/templates
            Method: POST
            RestApiId: !Ref ApiGatewayApi
            Auth:
              Authorizer: CognitoAuthorizer

  UploadMediaFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/media/upload-media.handler
      Runtime: nodejs20.x
      Timeout: 30
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref BucketName
        - DynamoDBCrudPolicy:
            TableName: !Ref MediaMetadataTable
      Environment:
        Variables:
          BUCKET_NAME: !Ref BucketName
          METADATA_TABLE: !Ref MediaMetadataTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /admin/media
            Method: POST
            RestApiId: !Ref ApiGatewayApi
            Auth:
              Authorizer: CognitoAuthorizer

  GetMediaByCategoryFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/media/get-media-by-category.handler
      Runtime: nodejs20.x
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaMetadataTable
        - S3ReadPolicy:
            BucketName: !Ref BucketName
      Environment:
        Variables:
          BUCKET_NAME: !Ref BucketName
          METADATA_TABLE: !Ref MediaMetadataTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /public/media/{categoryId}
            Method: GET
            RestApiId: !Ref ApiGatewayApi
            Auth:
              ApiKeyRequired: true

Outputs:
  ApiEndpoint:
    Description: API Gateway endpoint URL
    Value: !Sub "https://${ApiGatewayApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
  WebsiteApiKey:
    Description: API Key for public website access
    Value: !Ref ApiKey
  UserPoolId:
    Description: Cognito User Pool ID
    Value: !Ref AdminUserPool
  UserPoolClientId:
    Description: Cognito User Pool Client ID
    Value: !Ref AdminUserPoolClient
  BucketName:
    Description: S3 Bucket Name
    Value: !Ref MediaBucket